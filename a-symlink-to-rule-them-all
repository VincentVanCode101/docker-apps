#!/usr/bin/env bash
set -euo pipefail

# --- Resolve the real path of this script, following symlinks ---
SOURCE="${BASH_SOURCE[0]}"

# --- little symlink-walker
while [ -L "$SOURCE" ]; do
    DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done

BIN_DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
APP_DIR="$BIN_DIR/apps"

# --- The tool is the name this was invoked as ---
TOOL="$(basename "$0")"

# --- Load that tool's config ---
CONFIG="$APP_DIR/$TOOL/config.sh"

if [[ ! -f $CONFIG ]]; then
    echo "ERROR: no config for '$TOOL' (expected $CONFIG)" >&2
    exit 1
fi

source "$CONFIG"

# --- If you asked to build, do just that ---
if [[ ${1-} == "--build" ]]; then
    docker build -t "$IMAGE_TAG" "$APP_DIR/$TOOL"
    exit 0
fi

# --- Auto-build if the image doesn’t exist ---
if ! docker image inspect "$IMAGE_TAG" &>/dev/null; then
    echo "↻ Building $IMAGE_TAG..." >&2
    docker build -t "$IMAGE_TAG" "$APP_DIR/$TOOL"
fi

DOCKER_EXTRA_OPTS="${DOCKER_EXTRA_OPTS:-}"

###############################################################################
# Wrapper meta-flag handling
#   --map-home-dir      mount $HOME at the same path *and* run as host user
###############################################################################
MAP_HOME_DIR=0

# split DOCKER_EXTRA_OPTS safely into tokens, strip the meta-flag out
IFS=$' \t\n' read -r -a _opt_arr <<<"$DOCKER_EXTRA_OPTS"
_clean=()
for tok in "${_opt_arr[@]}"; do
    if [[ $tok == "--map-home-dir" ]]; then
        MAP_HOME_DIR=1
    else
        _clean+=("$tok")
    fi
done
DOCKER_EXTRA_OPTS="${_clean[*]}"

PWD_HOST="$(pwd)"
HOME_HOST="${HOME:-$(eval echo "~$(id -un)")}" # $HOME is always set on macOS
UID_HOST="$(id -u)"
GID_HOST="$(id -g)"

# -- Assembling docker options ----------------
docker_opts=(
    -v "${PWD_HOST}:${PWD_HOST}"
    -w "${PWD_HOST}"
)

if [[ $MAP_HOME_DIR -eq 1 ]]; then
    docker_opts+=(-v "${HOME_HOST}:${HOME_HOST}")

    # If we’re not already root map UID:GID so files aren’t owned by root
    if [[ $UID_HOST -ne 0 ]]; then
        docker_opts+=(-u "${UID_HOST}:${GID_HOST}" -e "HOME=${HOME_HOST}")
    else
        docker_opts+=(-e "HOME=/root")
    fi
fi

# -- Run it -----------------------------------
docker run --rm \
    "${docker_opts[@]}" \
    ${DOCKER_EXTRA_OPTS} \
    "$IMAGE_TAG" "$@"
